- Cleaning and transforming table 
- customer_orders
CREATE TEMP TABLE customer_orders_temp AS
SELECT 
  order_id, 
  customer_id, 
  pizza_id, 
  CASE
	  WHEN exclusions IS null OR exclusions LIKE 'null' THEN ' '
	  ELSE exclusions
	  END AS exclusions,
  CASE
	  WHEN extras IS NULL or extras LIKE 'null' THEN ' '
	  ELSE extras
	  END AS extras,
	order_time
FROM pizza_runner.customer_orders;

- runner_orders
CREATE TEMP TABLE runner_orders_temp AS
SELECT 
  order_id, 
  runner_id,  
  CASE
	  WHEN pickup_time LIKE 'null' THEN ' '
	  ELSE pickup_time
	  END AS pickup_time,
  CASE
	  WHEN distance LIKE 'null' THEN ' '
	  WHEN distance LIKE '%km' THEN TRIM('km' from distance)
	  ELSE distance 
    END AS distance,
  CASE
	  WHEN duration LIKE 'null' THEN ' '
	  WHEN duration LIKE '%mins' THEN TRIM('mins' from duration)
	  WHEN duration LIKE '%minute' THEN TRIM('minute' from duration)
	  WHEN duration LIKE '%minutes' THEN TRIM('minutes' from duration)
	  ELSE duration
	  END AS duration,
  CASE
	  WHEN cancellation IS NULL or cancellation LIKE 'null' THEN ' '
	  ELSE cancellation
	  END AS cancellation
FROM pizza_runner.runner_orders;

--pizza_recipes
SELECT		
   p.pizza_id,
   TRIM(t.value) AS topping_id,
   pt.topping_name
INTO cleaned_toppings
FROM 
     pizza_runner.pizza_recipes as p
     CROSS APPLY string_split(p.toppings, ',') as t
     JOIN pizza_toppings as pt
     ON TRIM(t.value) = pt.topping_id ;
 
ALTER TABLE #cleaned_customer_orders
ADD record_id INT IDENTITY(1,1);

-- to generate extra table
SELECT		
	c.record_id,
	TRIM(e.value) AS topping_id
INTO #extras
FROM 
	#cleaned_customer_orders as c
	CROSS APPLY string_split(c.extras, ',') as e;

-- to generate exclusions table
SELECT		
	c.record_id,
	TRIM(e.value) AS topping_id
INTO #exclusions
FROM 
	#cleaned_customer_orders as c
	CROSS APPLY string_split(c.exclusions, ',') as e;
