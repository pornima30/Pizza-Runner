--Solution
--C. Ingredient Optimisation
--What are the standard ingredients for each pizza?
/*
SELECT 
	p.pizza_name,
	STRING_AGG(t.topping_name, ', ') as ingredients
FROM 
	pizza_runner.pizza_names p
JOIN 
	pizza_runner.cleaned_toppings t
	ON p.pizza_id = t.pizza_id
GROUP BY 
	p.pizza_name;
*/
--What was the most commonly added extra?
/*
WITH toppings_cte AS 
(
	SELECT
  		pizza_id,
  		REGEXP_SPLIT_TO_TABLE(toppings, '[,\s]+')::INTEGER AS topping_id
	FROM 
  		pizza_runner.pizza_recipes
)
SELECT 
  	t.topping_id, pt.topping_name, 
  	COUNT(t.topping_id) AS topping_count
FROM 
	toppings_cte t
INNER JOIN 
	pizza_runner.pizza_toppings pt
  	ON t.topping_id = pt.topping_id
GROUP BY 
	t.topping_id, pt.topping_name
ORDER BY 
	topping_count DESC;
*/
--Generate an order item for each record in the customers_orders table in the format of one of the following:
--Meat Lovers
--Meat Lovers - Exclude Beef
--Meat Lovers - Extra Bacon
--Meat Lovers - Exclude Cheese, Bacon - Extra Mushroom, Peppers
/*
WITH extras_cte AS
(
	SELECT 
		record_id,
		'Extra ' + STRING_AGG(t.topping_name, ', ') as record_options
	FROM
		#extras e,
		pizza_toppings t
	WHERE e.topping_id = t.topping_id
	GROUP BY record_id
),
exclusions_cte AS
(
	SELECT 
		record_id,
		'Exclude ' + STRING_AGG(t.topping_name, ', ') as record_options
	FROM
		#exclusions e,
		pizza_toppings t
	WHERE e.topping_id = t.topping_id
	GROUP BY record_id
),
union_cte AS
(
	SELECT * FROM extras_cte
	UNION
	SELECT * FROM exclusions_cte
)

SELECT 
	c.record_id,
	CONCAT_WS(' - ', p.pizza_name, STRING_AGG(cte.record_options, ' - '))
FROM 
	#cleaned_customer_orders c
	JOIN pizza_names p
	ON c.pizza_id = p.pizza_id
	LEFT JOIN union_cte cte
	ON c.record_id = cte.record_id
GROUP BY
	c.record_id,
	p.pizza_name
ORDER BY 1;
*/
--Generate an alphabetically ordered comma separated ingredient list for each pizza order from the customer_orders table and add a 2x in front of any relevant ingredients
--For example: "Meat Lovers: 2xBacon, Beef, ... , Salami"
/*
WITH ingredients_cte AS
(
	SELECT
	c.record_id, 
	p.pizza_name,
	CASE
		WHEN t.topping_id 
		IN (select topping_id from #extras e where c.record_id = e.record_id)
		THEN '2x' + t.topping_name
		ELSE t.topping_name
	END as topping
	FROM 
		#cleaned_customer_orders c
		JOIN pizza_names p
			ON c.pizza_id = p.pizza_id
		JOIN #cleaned_toppings t 
			ON c.pizza_id = t.pizza_id
	WHERE t.topping_id NOT IN (select topping_id from #exclusions e where c.record_id = e.record_id)
)

SELECT 
	record_id,
	CONCAT(pizza_name+':',STRING_AGG(topping, ', ')) as ingredients_list
FROM ingredients_cte
GROUP BY 
	record_id,
	pizza_name
ORDER BY 1;
*/
--What is the total quantity of each ingredient used in all delivered pizzas sorted by most frequent first?
/*
WITH ingredients_cte AS
(
SELECT 
	c.record_id,
	t.topping_name,
	CASE
		-- if extra ingredient add 2
		WHEN t.topping_id 
		IN (select topping_id from #extras e where e.record_id = c.record_id) 
		THEN 2
		-- if excluded ingredient add 0
		WHEN t.topping_id 
		IN (select topping_id from #exclusions e where e.record_id = c.record_id) 
		THEN 0
		-- normal ingredient add 1
		ELSE 1 
	END as times_used
	FROM   
		#cleaned_customer_orders AS c
		JOIN #cleaned_toppings AS t
		ON c.pizza_id = t.pizza_id
) 

SELECT 
    topping_name,
    SUM(times_used) AS times_used 
FROM ingredients_cte
GROUP BY topping_name
ORDER BY 2 DESC;
*/
